name: ZIP Library Benchmark

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      iterations:
        description: 'Number of benchmark iterations'
        required: false
        default: '5'

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        node-version: [18, 20, 22]
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        # Verify package-lock.json exists
        if [ ! -f package-lock.json ]; then
          echo "Warning: package-lock.json not found, running npm install"
          npm install
        else
          npm ci
        fi
        
        # Verify critical dependencies
        node -e "
          const pkg = require('./package.json');
          const requiredDeps = ['adm-zip', 'yauzl', 'yazl', 'node-stream-zip', 'jszip', 'fflate'];
          const missing = requiredDeps.filter(dep => !pkg.dependencies[dep]);
          if (missing.length > 0) {
            console.error('Missing required dependencies:', missing);
            process.exit(1);
          }          console.log('âœ“ All required dependencies found');
        "
        
    - name: Security audit
      run: |
        echo "Running security audit..."
        npm audit --audit-level=moderate || {
          echo "Security vulnerabilities found, but continuing with benchmark"
          npm audit --audit-level=moderate --json > security-audit.json || true
        }
        
    - name: Create required directories
      run: |
        mkdir -p test-data results
        
    - name: Run benchmark
      run: |
        ITERATIONS=${{ github.event.inputs.iterations || '5' }}
        echo "Running benchmark with $ITERATIONS iterations on Node.js ${{ matrix.node-version }}"
        
        # Set timeout for benchmark
        timeout 25m npm run benchmark -- --iterations=$ITERATIONS || {
          echo "Benchmark timed out or failed"
          exit 1
        }
        
        # Verify results were generated
        if [ ! -f results/latest.json ]; then
          echo "Error: Benchmark results not generated"
          exit 1
        fi
        
        echo "Benchmark completed successfully"
      env:
        NODE_ENV: production
        
    - name: Generate system info
      run: |
        echo "=== System Information ===" > results/system-info-node${{ matrix.node-version }}.txt
        echo "Timestamp: $(date -u)" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "Node.js version: $(node --version)" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "NPM version: $(npm --version)" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "OS: $(uname -a)" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "" >> results/system-info-node${{ matrix.node-version }}.txt
        
        echo "=== CPU Information ===" >> results/system-info-node${{ matrix.node-version }}.txt
        cat /proc/cpuinfo | grep -E "(model name|cpu cores|siblings)" | head -6 >> results/system-info-node${{ matrix.node-version }}.txt
        echo "" >> results/system-info-node${{ matrix.node-version }}.txt
        
        echo "=== Memory Information ===" >> results/system-info-node${{ matrix.node-version }}.txt
        cat /proc/meminfo | grep -E "(MemTotal|MemAvailable|MemFree)" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "" >> results/system-info-node${{ matrix.node-version }}.txt
        
        echo "=== Disk Information ===" >> results/system-info-node${{ matrix.node-version }}.txt
        df -h / >> results/system-info-node${{ matrix.node-version }}.txt
        echo "" >> results/system-info-node${{ matrix.node-version }}.txt
        
        echo "=== GitHub Actions Environment ===" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "Runner OS: ${{ runner.os }}" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "Runner Architecture: ${{ runner.arch }}" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "Workflow: ${{ github.workflow }}" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "Run ID: ${{ github.run_id }}" >> results/system-info-node${{ matrix.node-version }}.txt
        
    - name: Rename results for matrix
      run: |
        if [ -f results/latest.json ]; then
          cp results/latest.json results/benchmark-node${{ matrix.node-version }}.json
          cp results/latest-report.md results/report-node${{ matrix.node-version }}.md
        fi
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-node${{ matrix.node-version }}
        path: |
          results/
          test-data/
          security-audit.json
        retention-days: 30
        if-no-files-found: warn

  generate-report:
    needs: benchmark
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download all benchmark results
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Consolidate results
      run: |
        mkdir -p results
        echo "Consolidating benchmark results..."
        
        # Copy all benchmark results to results directory
        find artifacts/ -name "*.json" -exec cp {} results/ \; 2>/dev/null || true
        find artifacts/ -name "*.md" -exec cp {} results/ \; 2>/dev/null || true
        find artifacts/ -name "*.txt" -exec cp {} results/ \; 2>/dev/null || true
        
        # List found files
        echo "Found result files:"
        ls -la results/ || echo "No results directory"
        
        # Verify we have at least one benchmark result
        if ! ls results/benchmark-node*.json 1> /dev/null 2>&1; then
          echo "Warning: No benchmark result files found"
        fi
        
    - name: Generate consolidated report
      run: |
        echo "Generating consolidated report..."
        if [ -f scripts/generate-report.js ]; then
          node scripts/generate-report.js
          echo "âœ“ Report generation completed"
          
          # Verify report was generated
          if [ -f results/consolidated-report.md ]; then
            echo "âœ“ Consolidated report generated successfully"
          else
            echo "Warning: Consolidated report not generated"
          fi
        else
          echo "Error: Report generator script not found"
          exit 1
        fi
        
    - name: Compare with baseline (PR only)
      if: github.event_name == 'pull_request'
      run: |
        if [ -f scripts/compare-performance.js ]; then
          node scripts/compare-performance.js
        else
          echo "Performance comparison not yet implemented"
        fi
        
    - name: Upload consolidated results
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-benchmark-results
        path: results/
        retention-days: 90
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the latest report if it exists
          let comment = '## ðŸš€ ZIP Library Benchmark Results\n\n';
          
          try {
            // Check if consolidated report exists
            if (fs.existsSync('results/consolidated-report.md')) {
              const report = fs.readFileSync('results/consolidated-report.md', 'utf8');
              comment += report;
            } else {
              // Fallback to individual reports
              const files = fs.readdirSync('results/').filter(f => f.startsWith('report-node'));
              if (files.length > 0) {
                comment += 'Benchmark completed for Node.js versions: ' + files.map(f => f.match(/node(\d+)/)[1]).join(', ') + '\n\n';
                comment += 'Detailed results are available in the artifacts.\n';
              } else {
                comment += 'Benchmark results are being processed...\n';
              }
            }
          } catch (error) {
            comment += `Error reading results: ${error.message}\n`;
          }
          
          comment += '\n---\n*Benchmark run completed at ' + new Date().toISOString() + '*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  update-readme:
    needs: generate-report
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download consolidated results
      uses: actions/download-artifact@v4
      with:
        name: consolidated-benchmark-results
        path: results/
        
    - name: Update README with latest results
      run: |
        echo "Updating README with latest results..."
        if [ -f scripts/update-readme.js ]; then
          node scripts/update-readme.js
          echo "âœ“ README update completed"
        else
          echo "Error: README updater script not found"
          exit 1
        fi
        
    - name: Commit and push README updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ -n "$(git status --porcelain)" ]; then
          git add README.md results/
          git commit -m "Update benchmark results [skip ci]"
          git push
        else
          echo "No changes to commit"
        fi

  archive-results:
    needs: generate-report
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download consolidated results
      uses: actions/download-artifact@v4
      with:
        name: consolidated-benchmark-results
        path: results/
        
    - name: Archive historical results
      run: |
        mkdir -p archive
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        ARCHIVE_DIR="archive/benchmark_${TIMESTAMP}"
        mkdir -p "$ARCHIVE_DIR"
        
        # Copy current results to archive
        cp results/consolidated-results.json "$ARCHIVE_DIR/" 2>/dev/null || true
        cp results/consolidated-report.md "$ARCHIVE_DIR/" 2>/dev/null || true
        
        # Create archive index if it doesn't exist
        if [ ! -f archive/index.json ]; then
          echo '{"archives": []}' > archive/index.json
        fi
        
        # Update archive index
        node -e "
          const fs = require('fs');
          const index = JSON.parse(fs.readFileSync('archive/index.json', 'utf8'));
          index.archives.push({
            timestamp: new Date().toISOString(),
            directory: 'benchmark_${TIMESTAMP}',
            commit: process.env.GITHUB_SHA
          });
          // Keep only last 20 archives
          if (index.archives.length > 20) {
            index.archives = index.archives.slice(-20);
          }
          fs.writeFileSync('archive/index.json', JSON.stringify(index, null, 2));
        "
        
        echo "Archived results to $ARCHIVE_DIR"
      env:
        GITHUB_SHA: ${{ github.sha }}

  deploy-pages:
    needs: generate-report
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download consolidated results
      uses: actions/download-artifact@v4
      with:
        name: consolidated-benchmark-results
        path: results/
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Create Pages content
      run: |
        mkdir -p _site
        
        # Copy results to site
        cp -r results/* _site/
        
        # Create a simple index.html
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Node.js ZIP Library Benchmark Results</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 40px; }
                h1 { color: #333; }
                .file-list { list-style: none; padding: 0; }
                .file-list li { margin: 10px 0; }
                .file-list a { text-decoration: none; color: #0366d6; }
                .file-list a:hover { text-decoration: underline; }
            </style>
        </head>
        <body>
            <h1>Node.js ZIP Library Benchmark Results</h1>
            <p>Latest benchmark results and reports:</p>
            <ul class="file-list">
        EOF
        
        # Add links to all result files
        for file in _site/*.json _site/*.md _site/*.txt; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "                <li><a href=\"$filename\">$filename</a></li>" >> _site/index.html
          fi
        done
        
        cat >> _site/index.html << 'EOF'
            </ul>
        </body>
        </html>
        EOF
        
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
