name: ZIP Library Benchmark

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      iterations:
        description: 'Number of benchmark iterations'
        required: false
        default: '5'

permissions:
  contents: write
  pull-requests: write
  pages: write

jobs:
  benchmark:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create required directories
      run: |
        mkdir -p test-data results
        
    - name: Run benchmark
      run: |
        ITERATIONS=${{ github.event.inputs.iterations || '5' }}
        npm run benchmark -- --iterations=$ITERATIONS
      env:
        NODE_ENV: production
        
    - name: Generate system info
      run: |
        echo "Node.js version: $(node --version)" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "NPM version: $(npm --version)" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "OS: $(uname -a)" >> results/system-info-node${{ matrix.node-version }}.txt
        echo "CPU info:" >> results/system-info-node${{ matrix.node-version }}.txt
        cat /proc/cpuinfo | grep "model name" | head -1 >> results/system-info-node${{ matrix.node-version }}.txt
        echo "Memory info:" >> results/system-info-node${{ matrix.node-version }}.txt
        cat /proc/meminfo | grep "MemTotal" >> results/system-info-node${{ matrix.node-version }}.txt
        
    - name: Rename results for matrix
      run: |
        if [ -f results/latest.json ]; then
          cp results/latest.json results/benchmark-node${{ matrix.node-version }}.json
          cp results/latest-report.md results/report-node${{ matrix.node-version }}.md
        fi
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-node${{ matrix.node-version }}
        path: |
          results/
          test-data/
        retention-days: 30

  generate-report:
    needs: benchmark
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download all benchmark results
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Consolidate results
      run: |
        mkdir -p results
        # Copy all benchmark results to results directory
        find artifacts/ -name "*.json" -exec cp {} results/ \;
        find artifacts/ -name "*.md" -exec cp {} results/ \;
        find artifacts/ -name "*.txt" -exec cp {} results/ \;
        
    - name: Generate consolidated report
      run: |
        if [ -f scripts/generate-report.js ]; then
          node scripts/generate-report.js
        else
          echo "Report generator not yet implemented"
        fi
        
    - name: Compare with baseline (PR only)
      if: github.event_name == 'pull_request'
      run: |
        if [ -f scripts/compare-performance.js ]; then
          node scripts/compare-performance.js
        else
          echo "Performance comparison not yet implemented"
        fi
        
    - name: Upload consolidated results
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-benchmark-results
        path: results/
        retention-days: 90
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the latest report if it exists
          let comment = '## ðŸš€ ZIP Library Benchmark Results\n\n';
          
          try {
            // Check if consolidated report exists
            if (fs.existsSync('results/consolidated-report.md')) {
              const report = fs.readFileSync('results/consolidated-report.md', 'utf8');
              comment += report;
            } else {
              // Fallback to individual reports
              const files = fs.readdirSync('results/').filter(f => f.startsWith('report-node'));
              if (files.length > 0) {
                comment += 'Benchmark completed for Node.js versions: ' + files.map(f => f.match(/node(\d+)/)[1]).join(', ') + '\n\n';
                comment += 'Detailed results are available in the artifacts.\n';
              } else {
                comment += 'Benchmark results are being processed...\n';
              }
            }
          } catch (error) {
            comment += `Error reading results: ${error.message}\n`;
          }
          
          comment += '\n---\n*Benchmark run completed at ' + new Date().toISOString() + '*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  update-readme:
    needs: generate-report
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download consolidated results
      uses: actions/download-artifact@v4
      with:
        name: consolidated-benchmark-results
        path: results/
        
    - name: Update README with latest results
      run: |
        if [ -f scripts/update-readme.js ]; then
          node scripts/update-readme.js
        else
          echo "README updater not yet implemented"
        fi
        
    - name: Commit and push README updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ -n "$(git status --porcelain)" ]; then
          git add README.md results/
          git commit -m "Update benchmark results [skip ci]"
          git push
        else
          echo "No changes to commit"
        fi

  deploy-pages:
    needs: generate-report
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download consolidated results
      uses: actions/download-artifact@v4
      with:
        name: consolidated-benchmark-results
        path: results/
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Create Pages content
      run: |
        mkdir -p _site
        
        # Copy results to site
        cp -r results/* _site/
        
        # Create a simple index.html
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Node.js ZIP Library Benchmark Results</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 40px; }
                h1 { color: #333; }
                .file-list { list-style: none; padding: 0; }
                .file-list li { margin: 10px 0; }
                .file-list a { text-decoration: none; color: #0366d6; }
                .file-list a:hover { text-decoration: underline; }
            </style>
        </head>
        <body>
            <h1>Node.js ZIP Library Benchmark Results</h1>
            <p>Latest benchmark results and reports:</p>
            <ul class="file-list">
        EOF
        
        # Add links to all result files
        for file in _site/*.json _site/*.md _site/*.txt; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "                <li><a href=\"$filename\">$filename</a></li>" >> _site/index.html
          fi
        done
        
        cat >> _site/index.html << 'EOF'
            </ul>
        </body>
        </html>
        EOF
        
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
